{"version":3,"sources":["FloatingLabelInput.tsx"],"names":["React","useState","View","Animated","StyleSheet","TextInput","GlobalStyles","FloatingLabelInput","title","value","onChangeText","keyboardType","titleActiveSize","titleInActiveSize","titleActiveColor","titleInactiveColor","textInputStyles","otherTextInputProps","isFieldActive","setIsFieldActive","position","Value","_handleFocus","timing","toValue","duration","useNativeDriver","start","_handleBlur","_returnAnimatedTitleStyles","top","interpolate","inputRange","outputRange","fontSize","color","Styles","titleStyles","baseInput","text","create","fontFamily","left","defaultProps"],"mappings":"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","sourcesContent":["// https://medium.com/@farid12ansari7/floating-title-or-placeholder-text-input-field-react-native-5fb5932669d\n/*\nThese four props are required:\n1- attrName: state variable name where value of input is stored.\n2- title: floating Text(title)\n3- value: value to be shown in input field\n4- updateMasterState: function to update value upon entering in input field.\n*/\nimport React, { useState } from 'react';\nimport { View, Animated, StyleSheet, TextInput } from 'react-native';\nimport GlobalStyles from './../assets/style/GlobalStyles';\n\ntype propTypes = {\n    title: string,\n    value: any,\n    onChangeText: Function,\n    keyboardType: any,\n    titleActiveSize: number, // to control size of title when field is active\n    titleInActiveSize: number, // to control size of title when field is inactive\n    titleActiveColor: string, // to control color of title when field is active\n    titleInactiveColor: string, // to control color of title when field is active\n    textInputStyles: object,\n    otherTextInputProps: object\n  }\n\nconst FloatingLabelInput= ({\n    title,\n    value,\n    onChangeText,\n    keyboardType,\n    titleActiveSize, // to control size of title when field is active\n    titleInActiveSize, // to control size of title when field is inactive\n    titleActiveColor, // to control color of title when field is active\n    titleInactiveColor, // to control color of title when field is active\n    textInputStyles ,\n    otherTextInputProps\n  }:propTypes) => {\n\n  const [isFieldActive, setIsFieldActive] = useState(false);\n  const position = new Animated.Value(value ? 1 : 0);\n  /* constructor(props) {\n    super(props);\n    const { value } = this.props;\n    this.position = new Animated.Value(value ? 1 : 0);\n    this.state = {\n      isFieldActive: false,\n    }\n  } */\n\n const _handleFocus = () => {\n    if (!isFieldActive) {\n      setIsFieldActive(true );\n      Animated.timing(position, {\n        toValue: 1,\n        duration: 150,\n        useNativeDriver:true\n      }).start();\n    }\n  }\n\n  const _handleBlur = () => {\n    if (isFieldActive && !value) {\n        setIsFieldActive( false );\n      Animated.timing(position, {\n        toValue: 0,\n        duration: 150,\n        useNativeDriver:true\n      }).start();\n    }\n  }\n\n  /* const _onChangeText = (updatedValue:any) => {\n    //const { attrName, updateMasterState } = propTypes; \n    updateMasterState(attrName, updatedValue);\n  } */\n\n  const _returnAnimatedTitleStyles = () => {\n   // const { isFieldActive } = this.state;\n   /*  const {\n      titleActiveColor, titleInactiveColor, titleActiveSize, titleInActiveSize\n    } = props; */\n  \n    return {\n      top: position.interpolate({\n        inputRange: [0, 1],\n        outputRange: [14, 0],\n      }),\n      fontSize: isFieldActive ? titleActiveSize : titleInActiveSize,\n      color: isFieldActive ? titleActiveColor : titleInactiveColor,\n    }\n  }\n\n    return (\n      <View >\n        <Animated.Text\n          style = {[Styles.titleStyles, _returnAnimatedTitleStyles()]}\n        >\n          {title}\n        </Animated.Text>\n        <TextInput\n          value = {value}\n          style = {[GlobalStyles.baseInput, textInputStyles]}\n          underlineColorAndroid = 'transparent'\n          onFocus = {_handleFocus}\n          onBlur = {_handleBlur}\n          onChangeText = {(text) => {onChangeText(text)}}\n          keyboardType = {keyboardType}\n          {...otherTextInputProps}\n        />\n      </View>\n    )\n  \n}\n\nconst Styles = StyleSheet.create({\n  titleStyles: {\n    fontFamily: 'Avenir-Medium',\n    left: 4,\n  }\n})\n\nFloatingLabelInput.defaultProps = {\n    keyboardType: 'default',\n    titleActiveSize: 11.5,\n    titleInActiveSize: 15,\n    titleActiveColor: 'black',\n    titleInactiveColor: 'dimgrey',\n    textInputStyles: {}, \n    otherTextInputProps: {},\n  }\n\nexport default FloatingLabelInput;"]}