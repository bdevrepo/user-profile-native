{"version":3,"sources":["LoginScreen.tsx"],"names":["LoginScreen","userNameLabel","passwordLabel","handleUsernaChange","handlePasswordChange","loginButtonTitle","handleLoginButton","createAccountLabel","handleCreateAccountButton","forgotPasswordLabel","handleForgotPassword","styles","container","value","GlobalStyles","viewButton","width","CUSTOMON","COLOR","setGlobalStyles","labelStyles","color","inputStyles","borderRadius","borderWidth","minHeight","margin","padding","StyleSheet","create","justifyContent","alignItems","resizeMode","backgroundColor","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  StyleSheet,\n  ScrollView,\n  View,\n  TouchableOpacity,\n  Text,\n  Button\n} from 'react-native';\nimport GlobalStyles from './../assets/style/GlobalStyles';\nimport { CUSTOMON } from './../store/constants';\nimport { FloatingLabelInput, setGlobalStyles } from 'react-native-floating-label-input';\n\n type PropsType = {\n  userNameLabel: string,\n  passwordLabel: string,\n  handleUsernaChange:Function,\n  handlePasswordChange:Function,\n  loginButtonTitle:string,\n  handleLoginButton:Function,\n  createAccountLabel:string,\n  handleCreateAccountButton:Function,\n  forgotPasswordLabel:string,\n  handleForgotPassword:Function\n} \n\nconst LoginScreen = ({userNameLabel,\n  passwordLabel,\n  handleUsernaChange,\n  handlePasswordChange,\n  loginButtonTitle,\n  handleLoginButton,\n  createAccountLabel,\n  handleCreateAccountButton,\n  forgotPasswordLabel,\n  handleForgotPassword}:PropsType) => {\n // const [username, setUsername] = useState('');\n // const [password, setPassword] = useState('');\n\n  return (\n      <ScrollView\n        keyboardShouldPersistTaps=\"handled\"\n        contentContainerStyle={styles.container}\n      >\n        <FloatingLabelInput\n          label={userNameLabel}\n         // value={username}\n          blurOnSubmit={false}\n          maxLength={100}\n          onChangeText={(value: any) => handleUsernaChange(value)}\n        />\n\n        <FloatingLabelInput\n          label={passwordLabel}\n          //value={password}\n          blurOnSubmit={false}\n          maxLength={100}\n          onChangeText={(value: any) => handlePasswordChange(value)}\n        />\n        <View style={[GlobalStyles.viewButton, { width: 350 }]}>\n          <Button\n            color={CUSTOMON.COLOR}\n            title={loginButtonTitle}\n            onPress={() => handleLoginButton}\n          />\n        </View>\n        <TouchableOpacity \n        onPress={() => handleForgotPassword}\n        >\n        <Text >{forgotPasswordLabel}</Text>\n        </TouchableOpacity>\n\n        <View style={[GlobalStyles.viewButton, { width: 350 }]}>\n          <Button\n            color={CUSTOMON.COLOR}\n            title={createAccountLabel}\n            onPress={() => handleCreateAccountButton}\n          />\n        </View>\n      </ScrollView>\n  );\n\n}\n\n/* setGlobalStyles.containerStyles = {\n  backgroundColor: '#eeddee',\n  // any styles you want to generalize to your input container\n}; */\nsetGlobalStyles.labelStyles = {\n  color: 'black',\n  // any styles you want to generalize to your floating label\n};\n\nsetGlobalStyles.inputStyles = {\n  // any styles you want to generalize to your input\n  color: 'black',\n  borderRadius: 5,\n  borderWidth: 1,\n  minHeight: 40,\n  margin: 8,\n  width: 350,\n  padding: 4\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    //flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    margin: 30,\n    resizeMode: 'cover',\n    backgroundColor: 'white',\n  },\n\n});\n\nLoginScreen.defaultProps = {\n  userNameLabel: 'Username',\n  passwordLabel: 'Password',\n  loginButtonTitle:'Login',\n  createAccountLabel:'Create account',\n  forgotPasswordLabel:'Forgot Password?',\n} \nexport default LoginScreen;"]}