{"version":3,"sources":["LoginScreen.tsx"],"names":["LoginScreen","userNameLabel","passwordLabel","handleUsernameChange","handlePasswordChange","loginButtonTitle","handleLoginButton","createAccountLabel","handleCreateAccountButton","forgotPasswordLabel","handleForgotPassword","username","password","styles","container","value","GlobalStyles","viewButton","width","CUSTOMON","COLOR","StyleSheet","create","justifyContent","alignItems","margin","resizeMode","backgroundColor","defaultProps"],"mappings":";;;;;;;AAAA;;AACA;;AAQA;;AACA;;AAA0D;;;;AAe1D,MAAMA,WAAW,GAAG,CAAC;AAACC,EAAAA,aAAD;AACnBC,EAAAA,aADmB;AAEnBC,EAAAA,oBAFmB;AAGnBC,EAAAA,oBAHmB;AAInBC,EAAAA,gBAJmB;AAKnBC,EAAAA,iBALmB;AAMnBC,EAAAA,kBANmB;AAOnBC,EAAAA,yBAPmB;AAQnBC,EAAAA,mBARmB;AASnBC,EAAAA;AATmB,CAAD,KASkB;AACrC;AACA;AACA,QAAMC,QAAQ,GAAG,EAAjB;AACA,QAAMC,QAAQ,GAAG,EAAjB;AACC,sBACI,6BAAC,uBAAD;AACE,IAAA,yBAAyB,EAAC,SAD5B;AAEE,IAAA,qBAAqB,EAAEC,MAAM,CAACC;AAFhC,kBAIE,6BAAC,2BAAD;AACE,IAAA,KAAK,EAAEb,aADT;AAEE,IAAA,KAAK,EAAEU,QAFT,CAGE;AACA;AAJF;AAKE,IAAA,YAAY,EAAGI,KAAD,IAAgBZ,oBAAoB,CAACY,KAAD;AALpD,IAJF,eAYE,6BAAC,2BAAD;AACE,IAAA,KAAK,EAAEb,aADT;AAEE,IAAA,KAAK,EAAEU,QAFT,CAGE;AACA;AAJF;AAKE,IAAA,YAAY,EAAGG,KAAD,IAAgBX,oBAAoB,CAACW,KAAD;AALpD,IAZF,eAmBE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,CAACC,sBAAaC,UAAd,EAA0B;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAA1B;AAAb,kBACE,6BAAC,mBAAD;AACE,IAAA,KAAK,EAAEC,oBAASC,KADlB;AAEE,IAAA,KAAK,EAAEf,gBAFT;AAGE,IAAA,OAAO,EAAE,MAAMC;AAHjB,IADF,CAnBF,eA0BE,6BAAC,6BAAD;AACA,IAAA,OAAO,EAAE,MAAMI;AADf,kBAGA,6BAAC,iBAAD,QAAQD,mBAAR,CAHA,CA1BF,eAgCE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,CAACO,sBAAaC,UAAd,EAA0B;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAA1B;AAAb,kBACE,6BAAC,mBAAD;AACE,IAAA,KAAK,EAAEC,oBAASC,KADlB;AAEE,IAAA,KAAK,EAAEb,kBAFT;AAGE,IAAA,OAAO,EAAE,MAAMC;AAHjB,IADF,CAhCF,CADJ;AA2CD,CAzDD;;AA2DA,MAAMK,MAAM,GAAGQ,wBAAWC,MAAX,CAAkB;AAC/BR,EAAAA,SAAS,EAAE;AACT;AACAS,IAAAA,cAAc,EAAE,QAFP;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,MAAM,EAAE,EAJC;AAKTC,IAAAA,UAAU,EAAE,OALH;AAMTC,IAAAA,eAAe,EAAE;AANR;AADoB,CAAlB,CAAf;;AAYA3B,WAAW,CAAC4B,YAAZ,GAA2B;AACzB3B,EAAAA,aAAa,EAAE,UADU;AAEzBC,EAAAA,aAAa,EAAE,UAFU;AAGzBG,EAAAA,gBAAgB,EAAC,OAHQ;AAIzBE,EAAAA,kBAAkB,EAAC,gBAJM;AAKzBE,EAAAA,mBAAmB,EAAC;AALK,CAA3B;eAOeT,W","sourcesContent":["import React from 'react';\r\nimport {\r\n  StyleSheet,\r\n  ScrollView,\r\n  View,\r\n  TouchableOpacity,\r\n  Text,\r\n  Button\r\n} from 'react-native';\r\nimport FloatingLabelInput from './FloatingLabelInput';\r\nimport GlobalStyles from './../assets/style/GlobalStyles';import { CUSTOMON } from './../store/constants';\r\n\r\n type PropsType = {\r\n  userNameLabel: string,\r\n  passwordLabel: string,\r\n  handleUsernameChange:Function,\r\n  handlePasswordChange:Function,\r\n  loginButtonTitle:string,\r\n  handleLoginButton:Function,\r\n  createAccountLabel:string,\r\n  handleCreateAccountButton:Function,\r\n  forgotPasswordLabel:string,\r\n  handleForgotPassword:Function\r\n} \r\n\r\nconst LoginScreen = ({userNameLabel,\r\n  passwordLabel,\r\n  handleUsernameChange,\r\n  handlePasswordChange,\r\n  loginButtonTitle,\r\n  handleLoginButton,\r\n  createAccountLabel,\r\n  handleCreateAccountButton,\r\n  forgotPasswordLabel,\r\n  handleForgotPassword}:PropsType) => {\r\n // const [username, setUsername] = useState('');\r\n // const [password, setPassword] = useState('');\r\n const username = '';\r\n const password = '';\r\n  return (\r\n      <ScrollView\r\n        keyboardShouldPersistTaps=\"handled\"\r\n        contentContainerStyle={styles.container}\r\n      >\r\n        <FloatingLabelInput\r\n          title={userNameLabel}\r\n          value={username}\r\n          //blurOnSubmit={false}\r\n          //maxLength={100}\r\n          onChangeText={(value: any) => handleUsernameChange(value)}\r\n        />\r\n\r\n        <FloatingLabelInput\r\n          title={passwordLabel}\r\n          value={password}\r\n          //blurOnSubmit={false}\r\n          //maxLength={100}\r\n          onChangeText={(value: any) => handlePasswordChange(value)}\r\n        />\r\n        <View style={[GlobalStyles.viewButton, { width: 350 }]}>\r\n          <Button\r\n            color={CUSTOMON.COLOR}\r\n            title={loginButtonTitle}\r\n            onPress={() => handleLoginButton}\r\n          />\r\n        </View>\r\n        <TouchableOpacity \r\n        onPress={() => handleForgotPassword}\r\n        >\r\n        <Text >{forgotPasswordLabel}</Text>\r\n        </TouchableOpacity>\r\n\r\n        <View style={[GlobalStyles.viewButton, { width: 350 }]}>\r\n          <Button\r\n            color={CUSTOMON.COLOR}\r\n            title={createAccountLabel}\r\n            onPress={() => handleCreateAccountButton}\r\n          />\r\n        </View>\r\n      </ScrollView>\r\n  );\r\n\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    //flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    margin: 30,\r\n    resizeMode: 'cover',\r\n    backgroundColor: 'white',\r\n  },\r\n\r\n});\r\n\r\nLoginScreen.defaultProps = {\r\n  userNameLabel: 'Username',\r\n  passwordLabel: 'Password',\r\n  loginButtonTitle:'Login',\r\n  createAccountLabel:'Create account',\r\n  forgotPasswordLabel:'Forgot Password?',\r\n} \r\nexport default LoginScreen;"]}