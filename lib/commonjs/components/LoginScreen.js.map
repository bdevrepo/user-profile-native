{"version":3,"sources":["LoginScreen.tsx"],"names":["LoginScreen","userNameLabel","passwordLabel","handleUsernaChange","handlePasswordChange","loginButtonTitle","handleLoginButton","createAccountLabel","handleCreateAccountButton","forgotPasswordLabel","handleForgotPassword","username","password","styles","container","value","GlobalStyles","viewButton","width","CUSTOMON","COLOR","StyleSheet","create","justifyContent","alignItems","margin","resizeMode","backgroundColor","defaultProps"],"mappings":";;;;;;;AAAA;;AACA;;AAQA;;AACA;;AAA0D;;;;AAe1D,MAAMA,WAAW,GAAG,CAAC;AAACC,EAAAA,aAAD;AACnBC,EAAAA,aADmB;AAEnBC,EAAAA,kBAFmB;AAGnBC,EAAAA,oBAHmB;AAInBC,EAAAA,gBAJmB;AAKnBC,EAAAA,iBALmB;AAMnBC,EAAAA,kBANmB;AAOnBC,EAAAA,yBAPmB;AAQnBC,EAAAA,mBARmB;AASnBC,EAAAA;AATmB,CAAD,KASkB;AACrC;AACA;AACA,QAAMC,QAAQ,GAAG,EAAjB;AACA,QAAMC,QAAQ,GAAG,EAAjB;AACC,sBACI,6BAAC,uBAAD;AACE,IAAA,yBAAyB,EAAC,SAD5B;AAEE,IAAA,qBAAqB,EAAEC,MAAM,CAACC;AAFhC,kBAIE,6BAAC,2BAAD;AACE,IAAA,KAAK,EAAEb,aADT;AAEE,IAAA,KAAK,EAAEU,QAFT,CAGE;AACA;AAJF;AAKE,IAAA,YAAY,EAAGI,KAAD,IAAgBZ,kBAAkB,CAACY,KAAD;AALlD,IAJF,eAYE,6BAAC,2BAAD;AACE,IAAA,KAAK,EAAEb,aADT;AAEE,IAAA,KAAK,EAAEU,QAFT,CAGE;AACA;AAJF;AAKE,IAAA,YAAY,EAAGG,KAAD,IAAgBX,oBAAoB,CAACW,KAAD;AALpD,IAZF,eAmBE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,CAACC,sBAAaC,UAAd,EAA0B;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAA1B;AAAb,kBACE,6BAAC,mBAAD;AACE,IAAA,KAAK,EAAEC,oBAASC,KADlB;AAEE,IAAA,KAAK,EAAEf,gBAFT;AAGE,IAAA,OAAO,EAAE,MAAMC;AAHjB,IADF,CAnBF,eA0BE,6BAAC,6BAAD;AACA,IAAA,OAAO,EAAE,MAAMI;AADf,kBAGA,6BAAC,iBAAD,QAAQD,mBAAR,CAHA,CA1BF,eAgCE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,CAACO,sBAAaC,UAAd,EAA0B;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAA1B;AAAb,kBACE,6BAAC,mBAAD;AACE,IAAA,KAAK,EAAEC,oBAASC,KADlB;AAEE,IAAA,KAAK,EAAEb,kBAFT;AAGE,IAAA,OAAO,EAAE,MAAMC;AAHjB,IADF,CAhCF,CADJ;AA2CD,CAzDD;;AA2DA,MAAMK,MAAM,GAAGQ,wBAAWC,MAAX,CAAkB;AAC/BR,EAAAA,SAAS,EAAE;AACT;AACAS,IAAAA,cAAc,EAAE,QAFP;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,MAAM,EAAE,EAJC;AAKTC,IAAAA,UAAU,EAAE,OALH;AAMTC,IAAAA,eAAe,EAAE;AANR;AADoB,CAAlB,CAAf;;AAYA3B,WAAW,CAAC4B,YAAZ,GAA2B;AACzB3B,EAAAA,aAAa,EAAE,UADU;AAEzBC,EAAAA,aAAa,EAAE,UAFU;AAGzBG,EAAAA,gBAAgB,EAAC,OAHQ;AAIzBE,EAAAA,kBAAkB,EAAC,gBAJM;AAKzBE,EAAAA,mBAAmB,EAAC;AALK,CAA3B;eAOeT,W","sourcesContent":["import React from 'react';\nimport {\n  StyleSheet,\n  ScrollView,\n  View,\n  TouchableOpacity,\n  Text,\n  Button\n} from 'react-native';\nimport FloatingLabelInput from './FloatingLabelInput';\nimport GlobalStyles from './../assets/style/GlobalStyles';import { CUSTOMON } from './../store/constants';\n\n type PropsType = {\n  userNameLabel: string,\n  passwordLabel: string,\n  handleUsernaChange:Function,\n  handlePasswordChange:Function,\n  loginButtonTitle:string,\n  handleLoginButton:Function,\n  createAccountLabel:string,\n  handleCreateAccountButton:Function,\n  forgotPasswordLabel:string,\n  handleForgotPassword:Function\n} \n\nconst LoginScreen = ({userNameLabel,\n  passwordLabel,\n  handleUsernaChange,\n  handlePasswordChange,\n  loginButtonTitle,\n  handleLoginButton,\n  createAccountLabel,\n  handleCreateAccountButton,\n  forgotPasswordLabel,\n  handleForgotPassword}:PropsType) => {\n // const [username, setUsername] = useState('');\n // const [password, setPassword] = useState('');\n const username = '';\n const password = '';\n  return (\n      <ScrollView\n        keyboardShouldPersistTaps=\"handled\"\n        contentContainerStyle={styles.container}\n      >\n        <FloatingLabelInput\n          title={userNameLabel}\n          value={username}\n          //blurOnSubmit={false}\n          //maxLength={100}\n          onChangeText={(value: any) => handleUsernaChange(value)}\n        />\n\n        <FloatingLabelInput\n          title={passwordLabel}\n          value={password}\n          //blurOnSubmit={false}\n          //maxLength={100}\n          onChangeText={(value: any) => handlePasswordChange(value)}\n        />\n        <View style={[GlobalStyles.viewButton, { width: 350 }]}>\n          <Button\n            color={CUSTOMON.COLOR}\n            title={loginButtonTitle}\n            onPress={() => handleLoginButton}\n          />\n        </View>\n        <TouchableOpacity \n        onPress={() => handleForgotPassword}\n        >\n        <Text >{forgotPasswordLabel}</Text>\n        </TouchableOpacity>\n\n        <View style={[GlobalStyles.viewButton, { width: 350 }]}>\n          <Button\n            color={CUSTOMON.COLOR}\n            title={createAccountLabel}\n            onPress={() => handleCreateAccountButton}\n          />\n        </View>\n      </ScrollView>\n  );\n\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    //flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    margin: 30,\n    resizeMode: 'cover',\n    backgroundColor: 'white',\n  },\n\n});\n\nLoginScreen.defaultProps = {\n  userNameLabel: 'Username',\n  passwordLabel: 'Password',\n  loginButtonTitle:'Login',\n  createAccountLabel:'Create account',\n  forgotPasswordLabel:'Forgot Password?',\n} \nexport default LoginScreen;"]}